<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MeMo.kyaukyuai</title>
    <link>https://kyaukyuai.github.io/post/</link>
    <description>Recent content in Posts on MeMo.kyaukyuai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jul 2016 21:42:34 +0900</lastBuildDate>
    <atom:link href="https://kyaukyuai.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rails on Docker</title>
      <link>https://kyaukyuai.github.io/post/docker-nization/</link>
      <pubDate>Sun, 24 Jul 2016 21:42:34 +0900</pubDate>
      
      <guid>https://kyaukyuai.github.io/post/docker-nization/</guid>
      <description>

&lt;h1 id=&#34;getting-started-with-docker-for-mac&#34;&gt;Getting Started with Docker for Mac&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/&#34;&gt;Getting Started with Docker for Mac&lt;/a&gt; の手順に従って、Docker for Macをインストールする.&lt;/p&gt;

&lt;h1 id=&#34;dockerfileの作成&#34;&gt;Dockerfileの作成&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;touch Dockerfile
vim Dockerfile
cat Dockerfile
---
FROM ruby:2.2.3
RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev postgres-client nodejs
RUN mkdir /app
WORKDIR /app
ADD Gemfile /app/Gemfile
ADD Gemfile.lock /app/Gemfile.lock
RUN bundle install
ADD . /app
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;docker-composeによるオーケストレーション&#34;&gt;docker-composeによるオーケストレーション&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;touch docker-compose.yml
vim docker-compose.yml
cat docker-compose.yml
---
version: &#39;2.0&#39;
services:
  db:
    image: postgres:9.5.3
    expose:
      - &amp;quot;5432&amp;quot;
  web:
    build: .
    command: bundle exec rails s -p 3000 -b &#39;0.0.0.0&#39;
    volumes:
      - .:/app
    ports:
      - &amp;quot;3000:3000&amp;quot;
    depends_on:
      - db
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;コンテナ起動&#34;&gt;コンテナ起動&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose run web bin/rake db:setup
docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;動作確認&#34;&gt;動作確認&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;コンテナ起動後の操作&#34;&gt;コンテナ起動後の操作&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ローカル開発時&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Docker Compose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rails g model Member&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;docker-compose run web rails g model Member&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rake db:migrate&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;docker-compose run web rake db:migrate&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rails dbconsole&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;docker-compose run web rails dbconsole&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RAILS_ENV=test bundle exec rake db:setup&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;docker-compose run -e RAILS_ENV=test web bundle exec rake db:setup&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;webサーバのスケールアウト&#34;&gt;Webサーバのスケールアウト&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;docker-compose scale web=3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>新規Swiftプロジェクト作成時に最初にやること</title>
      <link>https://kyaukyuai.github.io/post/start_swift_project/</link>
      <pubDate>Sun, 17 Jul 2016 23:43:42 +0900</pubDate>
      
      <guid>https://kyaukyuai.github.io/post/start_swift_project/</guid>
      <description>

&lt;p&gt;(最終更新日時: 2016/07/18)&lt;/p&gt;

&lt;p&gt;この記事は随時更新予定です.&lt;/p&gt;

&lt;p&gt;iOSアプリ作成のためにSwiftプロジェクトを作成する際に最初にやるべきことを記述していく.
いつもどうしてたか忘れてしまうので備忘録として記述する.&lt;/p&gt;

&lt;h1 id=&#34;gitignoreテンプレートの作成&#34;&gt;.gitignoreテンプレートの作成&lt;/h1&gt;

&lt;p&gt;まずはバージョン管理の際に必要となる.gitignoreテンプレートの作成方法を記述する.
自分の場合は、&lt;a href=&#34;https://rubygems.org/gems/gemignore&#34;&gt;gemignore&lt;/a&gt;を利用している.&lt;/p&gt;

&lt;h2 id=&#34;gemignoreのインストール&#34;&gt;gemignoreのインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gem install gemignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テンプレート生成&#34;&gt;テンプレート生成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd project_root
touch .gitignore
gemignore add swift
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;cocoapod&#34;&gt;CocoaPod&lt;/h1&gt;

&lt;p&gt;次に、外部ライブラリ利用時に不可欠な&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;の導入手順を記述する.&lt;/p&gt;

&lt;h2 id=&#34;cocoapods-gemのインストール&#34;&gt;cocoapods gemのインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;podfileの生成&#34;&gt;Podfileの生成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;pod init
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ライブラリをインストールor更新&#34;&gt;ライブラリをインストールor更新&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;pod install
or
pod update
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;swiftlint&#34;&gt;SwiftLint&lt;/h1&gt;

&lt;p&gt;次に、コード品質に不可欠なLintの導入手順を記述する.
ここでは、&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;を利用する.&lt;/p&gt;

&lt;h2 id=&#34;swiftlintのインストール&#34;&gt;swiftlintのインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;brew install swiftlint
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;xcodeでのセットアップ&#34;&gt;Xcodeでのセットアップ&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Run Script Phase&amp;rdquo;に下記スクリプトを追加する.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if which swiftlint &amp;gt;/dev/null; then
  swiftlint
else
  echo &amp;quot;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&amp;quot;
fi

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;swiftlint-ymlの生成&#34;&gt;.swiftlint.ymlの生成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;touch .swiftlint.yml
cat .swiftlint.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml:.swiftlint.yml&#34;&gt;line_length:
  - 200 #warning
  - 300 #error

file_length:
  - 600  #warning
  - 1200 #error
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;fabric&#34;&gt;Fabric&lt;/h1&gt;

&lt;p&gt;Fabricの指示に従って進めると特につまづくところはない.&lt;/p&gt;

&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;github:SwiftLint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/x3ro/gemignore&#34;&gt;github:gemignore&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bluemixで始める無料bot運用 - Hubot編 -</title>
      <link>https://kyaukyuai.github.io/post/bluemix_bot/</link>
      <pubDate>Sat, 09 Jul 2016 08:48:29 +0900</pubDate>
      
      <guid>https://kyaukyuai.github.io/post/bluemix_bot/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://console.au-syd.bluemix.net/&#34;&gt;Bluemix&lt;/a&gt;を利用して24時間稼働のbotを無料で運用したいということで実施しました.
Bluemixの価格表は&lt;a href=&#34;https://console.ng.bluemix.net/pricing/&#34;&gt;こちら&lt;/a&gt;になりますので参考にしてください.
実際はTwiiterのボットを作成したので後ほど触れようと思います.&lt;/p&gt;

&lt;h1 id=&#34;前提&#34;&gt;前提&lt;/h1&gt;

&lt;p&gt;前提として下記アカウントを既に保持しているとする.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bluemixアカウント&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;hubotインスタンスの生成&#34;&gt;hubotインスタンスの生成&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.npmjs.com/getting-started/installing-node&#34;&gt;node.jsとnpm&lt;/a&gt;を導入後、下記をコマンドによりhubot generatorをインストールする.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%  npm install -g yo generator-hubot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記コマンドが正常に終了すると、[yeoman]()のhubot generatorが利用できるようになるので、新しくhubotのインスタンスを生成してみよう.ここでは、&lt;code&gt;ourhubot&lt;/code&gt;という名前のインスタンスを生成する例を示す.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% mkdir ourhubot
% cd ourhubot
% yo hubot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、gitを利用している場合は上記コマンドで生成されたファイルで初期化しよう.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% git init
% git add .
% git commit -m &amp;quot;Initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦&lt;code&gt;ourhubot&lt;/code&gt;の完成で、ローカルマシンで動かすことが可能である.hubotはデフォルトでredisを必要としているため、動かす際にredisをインストールする、または&lt;code&gt;external-scripts.json&lt;/code&gt;から&lt;code&gt;hubot-redis-brain&lt;/code&gt;を除く必要があるので注意を.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% bin/hubot --name ourhubot
ourhubot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;bluemixへのhubotデプロイ&#34;&gt;Bluemixへのhubotデプロイ&lt;/h1&gt;

&lt;p&gt;Bluemixのアカウントを既に保持している場合は、あとは必要となるのは&lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;Cloud Foundry CLI&lt;/a&gt;だけである.
macの場合は、下記コマンドでインストール可能である.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% brew tap cloudfoundry/tap
% brew install cf-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に&lt;code&gt;manifest.yml&lt;/code&gt;を定義します.そして&lt;code&gt;procfile&lt;/code&gt;は不要になるので削除します.下記はSlack利用の場合の例になります.
詳しくは&lt;a href=&#34;https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html&#34;&gt;こちら&lt;/a&gt;を参考にして下さい.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;applications:
- buildpack: https://github.com/jthomas/nodejs-v4-buildpack.git
  command: ./bin/hubot --adapter slack
  path: .
  instances: 1
  memory: 256M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;manifest.yml&lt;/code&gt;の準備が終わりましたら、最終段階です.
下記コマンドではログイン情報が求められます.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd ourhubot
% cf api https://api.ng.bluemix.net
% cf login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いよいよ、Bluemixによる無料botの運用の開始です.
下記コマンドで稼働させてください.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cf push NAME_OF_YOUR_HUBOT_APP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、herokuのgithubコネクトと同様にBluemix側にgitのレポジトリを指定すれば、githubにpushからの自動アップデートが実現できます.&lt;/p&gt;

&lt;h1 id=&#34;tips&#34;&gt;Tips&lt;/h1&gt;

&lt;h3 id=&#34;bluemix-cli&#34;&gt;Bluemix CLI&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Clound Foundry&lt;/code&gt;の&lt;code&gt;cf&lt;/code&gt;コマンドに代わる&lt;code&gt;bleumix Cli&lt;/code&gt;が登場している.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://clis.ng.bluemix.net/ui/home.html&#34;&gt;こちら&lt;/a&gt;からダウンロード可能です.&lt;/p&gt;

&lt;h3 id=&#34;organizationの設定に注意&#34;&gt;Organizationの設定に注意&lt;/h3&gt;

&lt;p&gt;Organizationのロケーションとして、2016年7月9日現在で3箇所(シドニー、英国、米国南部)選択可能であるが、どこを選ぶかによってAPIのEndpointで指定するURLを変わってくるので注意を.&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://clis.ng.bluemix.net/ui/home.html&#34;&gt;Bluemix CLI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/github/hubot/blob/master/docs/index.md&#34;&gt;github:hubot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://console.ng.bluemix.net/pricing/&#34;&gt;Bluemix価格表&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html&#34;&gt;Cloud Foundry Document:Deploying with Application Manifests&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>初iOSアプリ公開(QiitaQ)</title>
      <link>https://kyaukyuai.github.io/post/qiitaq/</link>
      <pubDate>Mon, 04 Jul 2016 22:09:04 +0900</pubDate>
      
      <guid>https://kyaukyuai.github.io/post/qiitaq/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://launchkit.io/websites/1YCKKCAwF84/&#34;&gt;マーケティングページ&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;利用したライブラリ一覧&#34;&gt;利用したライブラリ一覧&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Alamofire&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SwiftyJSON&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ObjectMapper&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fabric&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Crashlytics&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RealmSwift&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ReactKit&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PusherSwift&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JSQMessagesViewController&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MCSwipeTableViewCell&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Optimizely-iOS-SDK&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Charts/Realm&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google App Engine で始める WordPressでのサイト構築</title>
      <link>https://kyaukyuai.github.io/post/wordpress_for_gae/</link>
      <pubDate>Sun, 26 Jun 2016 11:14:00 +0900</pubDate>
      
      <guid>https://kyaukyuai.github.io/post/wordpress_for_gae/</guid>
      <description>

&lt;p&gt;近頃、耳にする機会の増えている&lt;a href=&#34;https://cloud.google.com/&#34;&gt;GCP(Google Cloud Platform)&lt;/a&gt;、2016年後半には日本リージョンの開設も予定されている.
そのGCPのサービスの一つである&lt;a href=&#34;https://cloud.google.com/appengine/&#34;&gt;GAE(Google App Engine)&lt;/a&gt;を利用して、&lt;a href=&#34;https://ja.wordpress.com/&#34;&gt;WordPress&lt;/a&gt;でのサイト構築を試してみる.&lt;/p&gt;

&lt;h2 id=&#34;gcp-project-の作成&#34;&gt;GCP project の作成&lt;/h2&gt;

&lt;p&gt;まずは、&lt;a href=&#34;https://console.cloud.google.com/home/dashboard&#34;&gt;GCPのダッシュボード&lt;/a&gt;からプロジェクトを作成する.
Headerの&lt;code&gt;Create a project...&lt;/code&gt;より作成する.
プロジェクト名は任意で良い.&lt;/p&gt;

&lt;h2 id=&#34;cloud-sql-の作成&#34;&gt;Cloud SQL の作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/sql/docs/create-instance&#34;&gt;ここ&lt;/a&gt;より、Cloud SQLのインスタンスを作成する.
Instance IDは任意でも良いが、&lt;code&gt;wordpress&lt;/code&gt;にしておくと後々便利である.
ここでの注意点は2点.&lt;/p&gt;

&lt;h3 id=&#34;1-authorized-ip-addressesにipアドレスを追加&#34;&gt;1. Authorized IP AddressesにIPアドレスを追加&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.com/#q=whats+my+ip&#34;&gt;Your IP Address&lt;/a&gt;に記述されているIP Addressを、Authorized networksに追加する.&lt;/p&gt;

&lt;h3 id=&#34;2-regionはus-xxxを選択&#34;&gt;2. Regionはus-xxxを選択&lt;/h3&gt;

&lt;p&gt;地域を「米国」にしないとApp Engineから接続できない.
自分は暫くここではまってしまった&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;appengine-php-wordpress-starter-projectのダウンロード&#34;&gt;appengine-php-wordpress-starter-projectのダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/appengine-php-wordpress-starter-project&#34;&gt;ここ&lt;/a&gt;より、githubのGAEのwordpressのスタータ用プロジェクトをダウンロードする.&lt;/p&gt;

&lt;p&gt;そして、&lt;code&gt;app.yaml&lt;/code&gt;と&lt;code&gt;wordpress/wp-config.pho&lt;/code&gt;のyour-project-idの部分を、あなたのプロジェクトID(プロジェクト名ではないので注意)に変換する.&lt;/p&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://googlecloudplatform.github.io/appengine-php-wordpress-starter-project/&#34;&gt;公式: Quick Start WordPress for Google App Engine&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webサイト構築・開発に便利なサイト一覧</title>
      <link>https://kyaukyuai.github.io/post/site/</link>
      <pubDate>Sat, 25 Jun 2016 12:01:12 +0900</pubDate>
      
      <guid>https://kyaukyuai.github.io/post/site/</guid>
      <description>

&lt;p&gt;(最終更新日時: 2016/06/26)&lt;/p&gt;

&lt;p&gt;Webサイトやブログの構築・開発の際に自分が利用している便利なサイトを備忘録として記述していく.&lt;/p&gt;

&lt;p&gt;このポストに関しては不定期に更新していく予定.&lt;/p&gt;

&lt;h2 id=&#34;フリー画像検索&#34;&gt;フリー画像検索&lt;/h2&gt;

&lt;p&gt;大抵の場合、下記サイトでイケてる画像を拝借する. まずはこのサイト！てな感じ.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unsplash.com/&#34;&gt;unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近ちょろちょろと使っているサイト.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pixabay.com/&#34;&gt;pixabay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ロゴ作成&#34;&gt;ロゴ作成&lt;/h2&gt;

&lt;p&gt;自分の趣味サイトの場合は、こちらのサイトを使って作成している.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.squarespace.com/logo#&#34;&gt;squarespace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;画像編集&#34;&gt;画像編集&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.gimp.org/&#34;&gt;GIMP&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--gimp-j79hm9d2w6i.com/gimp-image-transmission-png-save/&#34;&gt;画像タイプを指定して保存する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.img2icnsapp.com/&#34;&gt;Image2icon&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サイト分析&#34;&gt;サイト分析&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/analytics/&#34;&gt;Google analytics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;markdown記法&#34;&gt;Markdown記法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Qiita/items/c686397e4a0f4f11683d#images---%E7%94%BB%E5%83%8F%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF&#34;&gt;Qiita:Markdown記法チートシート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ciaas&#34;&gt;CIaaS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://app.wercker.com/&#34;&gt;wercker&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;静的ページ作成エンジン&#34;&gt;静的ページ作成エンジン&lt;/h2&gt;

&lt;p&gt;関連記事: &lt;a href=&#34;https://kyaukyuai.github.io/post/hello/&#34;&gt;HugoとGitHubPagesで始める無料でのブログ運営 + Werckerによる記事公開の自動化&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;アプリ作成関連&#34;&gt;アプリ作成関連&lt;/h2&gt;

&lt;p&gt;アプリのマーケティングページの作成から、スクリーンショットの作成まで、アプリリリースに向けて必要な一通りの作業を担ってくれるサービス.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://launchkit.io/&#34;&gt;launchkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アプリ作成時のアイコンはこちらから.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://icons8.com/&#34;&gt;icons8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ショートurl作成&#34;&gt;ショートURL作成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://app.bitly.com/bitlinks/&#34;&gt;bitly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://kyaukyuai.github.io/&#34;&gt;kyaukyuai.github.io&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bitbucket.org&#34;&gt;bitbucket&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Heroku&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://console.au-syd.bluemix.net/&#34;&gt;IBM Bluemix&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goole Cloud Platform&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slack&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HugoとGitHubPagesで始める無料でのブログ運営 &#43; Werckerによる記事公開の自動化</title>
      <link>https://kyaukyuai.github.io/post/hello/</link>
      <pubDate>Wed, 22 Jun 2016 22:20:21 +0900</pubDate>
      
      <guid>https://kyaukyuai.github.io/post/hello/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;モダン静的HTMLジェネレータHugo&lt;/a&gt;と&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHubPages&lt;/a&gt;を利用して無料でブログを開設するための手続きを書き記す.
また、CI-as-a-Serviceとして有名な&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;を利用して記事公開までの流れを自動化する.&lt;/p&gt;

&lt;p&gt;自分の動機・モチベーションとしては、普段ちょっと勉強したりしたことを忘れてしまうことが多いので、少しでも備忘録として残していくことである.&lt;/p&gt;

&lt;h2 id=&#34;hugoのインストール&#34;&gt;Hugoのインストール&lt;/h2&gt;

&lt;p&gt;まずは、Hugoのインストールを行う.
macの場合は下記コマンドでインストール可能.&lt;/p&gt;

&lt;p&gt;公式のインストール手順は&lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;ココ&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
hugo version
// it should be as follows.
Hugo Static Site Generator v0.16 BuildDate: 2016-06-06T21:37:59+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hugo作業用ディレクトリの作成&#34;&gt;Hugo作業用ディレクトリの作成&lt;/h2&gt;

&lt;p&gt;下記コマンドでサイト作成の作業用ディレクトリが作成できる.
ここでの作業用ディレクトリ名と実際のサイト名は関係ないので、Hugo作業用ディレクトリということが認識できる名前であれば問題ない.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site #{site_name}
cd #{site_name}
ls -lh
// command result shoule be as follows.
total 8
drwxr-xr-x  2 kyaukyuai  staff   68  6 22 22:17 archetypes
-rw-r--r--  1 kyaukyuai  staff  199  6 22 22:57 config.toml
drwxr-xr-x  3 kyaukyuai  staff  102  6 22 22:20 content
drwxr-xr-x  2 kyaukyuai  staff   68  6 22 22:17 data
drwxr-xr-x  2 kyaukyuai  staff   68  6 22 22:17 layouts
drwxr-xr-x  3 kyaukyuai  staff  102  6 22 22:55 static
drwxr-xr-x  3 kyaukyuai  staff  102  6 22 22:18 themes
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テーマのインストール&#34;&gt;テーマのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;公式テーマ一覧&lt;/a&gt;よりお気に入りのテーマを探し、インストールする.
ここでは、&lt;a href=&#34;http://themes.gohugo.io/robust/&#34;&gt;hugo_theme_robust&lt;/a&gt;を選択した例を示す.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd themes
git clone https://github.com/dim0627/hugo_theme_robust.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;記事の作成&#34;&gt;記事の作成&lt;/h2&gt;

&lt;p&gt;下記コマンドで記事のテンプレートを作成し、テンプレート(&lt;code&gt;hello.md&lt;/code&gt;)を編集することで記事を作成できる.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/hello.md
ls -l content/post/hello.md
cat content/post/hello.md

// command result should be as follows.
+++
date = &amp;quot;2016-07-03T17:19:38+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;記事の確認&#34;&gt;記事の確認&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo server -w -D -t hugo_theme_robust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;wオプションを有効にすることで、記事が編集するとオートリロードされる.&lt;/p&gt;

&lt;p&gt;Dオプションを有効にすることで、下書き中(draft=true)の記事も表示されるようになる.&lt;/p&gt;

&lt;h2 id=&#34;公開用記事の作成&#34;&gt;公開用記事の作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo
ls -l public
cd public
git init
echo &amp;quot;.DS_Store&amp;quot; &amp;gt;&amp;gt; .gitignore
git add -A
git commit -m &amp;quot;First Article&amp;quot;
git remote add origin https://github.com/kyaukyuai/kyaukyuai.github.io.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://kyaukyuai.github.io&#34;&gt;http://kyaukyuai.github.io&lt;/a&gt;で公開記事を確認しよう.&lt;/p&gt;

&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;

&lt;h3 id=&#34;default-md-の作成によるデフォルトテンプレートの編集&#34;&gt;&lt;code&gt;default.md&lt;/code&gt;の作成によるデフォルトテンプレートの編集&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;archetypes/default.md&lt;/code&gt;を作成することで、デフォルトテンプレートを編集できる.&lt;/p&gt;

&lt;p&gt;自分の場合は、下記のように編集している.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;&amp;quot;
description = &amp;quot;&amp;quot;
tags = [ &amp;quot;&amp;quot;, &amp;quot;&amp;quot; ]
date = &amp;quot;now()&amp;quot;
categories = [ &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, ]

image = &amp;quot;&amp;quot; # optional
toc = false # optional, When set to FALSE this parameter, table of contents not appears in only this article.
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;werckerによる記事公開の自動化&#34;&gt;Werckerによる記事公開の自動化&lt;/h2&gt;

&lt;p&gt;基本的には&lt;a href=&#34;http://gohugo.io/tutorials/automated-deployments&#34;&gt;公式の記事&lt;/a&gt;通りに進めることで実現できる.&lt;/p&gt;

&lt;p&gt;下記に、&lt;code&gt;wercker.yml&lt;/code&gt;を示す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby:wercker.yml&#34;&gt;# This references a standard debian container from the
# Docker Hub https://registry.hub.docker.com/_/debian/
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: debian
build:
  steps:
    - arjen/hugo-build:
        theme: hugo_theme_robust
        version: &amp;quot;0.15&amp;quot;
        flags: --buildDrafts=true

deploy:
  steps:
    - install-packages:
        packages: git ssh-client
    - lukevivier/gh-pages@0.2.1:
        token: $GIT_TOKEN
        repo: kyaukyuai/kyaukyuai.github.io
        basedir: public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;唯一ハマったポイントがwerckerのworkflowにdeployを下記のように定義しなければならないことだ.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kyaukyuai.github.io/images/wercker.png&#34; alt=&#34;wercker&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tanksuzuki.com/post/hugo-github-pages-1/&#34;&gt;TANKSUZUKI.COM:Hugo + GitHub Pagesでブログを作る#1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>